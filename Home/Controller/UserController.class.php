<?php
namespace Home\Controller;
use Think\Controller;
use Home\Controller\CommonController;
class UserController extends CommonController {
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }
	//检查是否实名认证
	private function check_certification(){
		$userid = session('userid');
		$is_cert = M('user')->where(array('id'=>$userid))->getField('is_cert');
		if($is_cert){
			return true;
		}
		return false;
	}

    //
    public function qrcode(){
        vendor('phpqrcode.phpqrcode');
        $url = I('get.url');

        if (strpos($url, 'http')===false) {
            //if no http
            $url='http://'.$url;
        }
        \QRcode::png($url); 
    }

    public function index(){
		$userid = session('userid');
		//合计挖矿收益
		$wk_hj =  M('sys_fl_log')->where(array('userid'=>$userid,'status'=>1))->sum('num');
		$this->assign('wk_hj',$wk_hj);
		$this->display();
	}
	

    /**
     * 个人资料
     */
    public function profile()
    {
        $userid = session('userid') ;
        $info = M('user')->where(array('id'=>$userid))->find();
        $this->assign('info',$info);
        $this->display();
    }
    /**
     * 个人资料修改
     */
    public function ajax_profile()
    {
        $userid = session('userid') ;
        $realname = I('post.realname');
        $idcard = I('post.idcard');
        $country = I('post.country');
        $province = I('post.province');
        $city = I('post.city');

        $info = M('User')->where(array('id'=>$userid))->save(array(
            'realname'=>$realname,'idcard'=>$idcard,
            'country'=>$country,'province'=>$province,'city'=>$city,
        ));
        if($info){
            echo ajax_return(1,'修改成功');
        }else{
            echo ajax_return(0,'修改失败');
        }
    }

    /**
     * 密码管理
     */
    public function password()
    {
        $this->display();
    }
    /**
     *发送修改登录密码短信验证
     */
    public function ajax_password_send_sms()
    {
        $phone = session('phone');
		if(session($phone.'password')){
			echo ajax_return(1,'短信验证码发送成功,请勿频繁发送');exit;
		}
        $code = mt_rand(10000,99999);
        $result = send_sms('78771',$phone,$code);
        if($result['info'] == 'success'){
            session($phone.'password',$code);
            echo ajax_return(1,'短信验证码发送成功');
        }else{
            echo ajax_return(0,$result['msg']);
        }
    }
    /**
     * 修改登录密码
     */
    public function ajax_password()
    {
        $userid = session('userid');
        
        $newpassword = I('post.newpassword');
        $newpassword2 = I('post.newpassword2');
		$sms = I('post.sms');
		$phone = session('phone');
        if( $newpassword == '' || $newpassword2 == '' || $newpassword != $newpassword2){
            echo ajax_return(0,'密码设置不正确');exit;
        }
		if($sms == ''){
            echo ajax_return(0,'短信验证码不能为空');exit;
        }
		//判断短信吗是否正确
        if($sms != session($phone . 'password')){
            echo ajax_return(0,'短信验证码不正确');exit;
        }
		
        $password = M('user')->where(array('id'=>$userid))->getField('password');
        
        $info = M('user')->where(array('id'=>$userid))->setField(array('password'=>md5($newpassword)));
        if($info){
			session($phone.'password',null);
            echo ajax_return(1,'修改成功');exit;
        }else{
            echo ajax_return(0,'修改失败');
        }

    }
	/**
     *发送修改交易密码短信验证
     */
    public function ajax_paypassword_send_sms()
    {
        $phone = session('phone');
		if(session($phone.'paypassword')){
			echo ajax_return(1,'短信验证码发送成功,请勿频繁发送');exit;
		}
        $code = mt_rand(10000,99999);
        $result = send_sms('78771',$phone,$code);
        if($result['info'] == 'success'){
            session($phone.'paypassword',$code);
            echo ajax_return(1,'短信验证码发送成功');
        }else{
            echo ajax_return(0,$result['msg']);
        }
    }
    /**
     * 修改交易密码
     */
    public function ajax_paypassword()
    {
        $userid = session('userid') ;
       
        $newpassword = I('post.newpassword');
        $newpassword2 = I('post.newpassword2');
        $sms = I('post.sms');
		$phone = session('phone');
        if($newpassword == '' || $newpassword2 == '' || $newpassword != $newpassword2){
            echo ajax_return(0,'密码设置不正确');exit;
        }
		if($sms == ''){
            echo ajax_return(0,'短信验证码不能为空');exit;
        }
		//判断短信吗是否正确
        if($sms != session($phone . 'paypassword')){
            echo ajax_return(0,'短信验证码不正确');exit;
        }

        $password = M('user')->where(array('id'=>$userid))->getField('paypassword');
       
        $info = M('user')->where(array('id'=>$userid))->setField(array('paypassword'=>md5($newpassword)));
        if($info){
			session($phone.'paypassword',null);
            echo ajax_return(1,'修改成功');exit;
        }else{
            echo ajax_return(0,'修改失败');
        }

    }

    /**
     * 手机页面
     */
    public function phone()
    {
        $this->display();
    }

    /**
     *发送更换手机短信验证
     */
    public function ajax_send_sms()
    {
        $phone = I('post.phone');
        //判断手机号是否存在
        $id = M('user')->where(array('phone'=>$phone))->getField('id');
        if($id){
            echo ajax_return(0,'手机号已存在');exit;
        }
        $code = mt_rand(10000,99999);
        $result = send_sms('78771',$phone,$code);
        if($result['info'] == 'success'){
            session($phone.'chg',$code);
            echo ajax_return(1,'短信验证码发送成功');
        }else{
            echo ajax_return(0,$result['msg']);
        }
    }

    /**
     * 更换手机号操作
     */
    public function ajax_change_phone()
    {
        $phone = I('post.phone');
        $sms = I('post.sms');

        $userid = session('userid') ;
        //判断短信吗是否正确
        if($sms != session($phone . 'chg')){
            echo ajax_return(0,'短信验证码不正确');exit;
        }
        //可以更换
        $info = M('user')->where(array('id'=>$userid))->setField(array('phone'=>$phone,'username'=>$phone));
        if($info){
            session('phone',$phone);
            echo ajax_return(0,'修改成功');
        }else{
            echo ajax_return(0,'修改失败');
        }
    }


    /**
     * 我的设备
     */
    public function device()
    {
        $userid = session('userid');
        $mydevice = M('user_device')->alias('a')->join('left join device b on a.device_id=b.id')->field('a.*,b.name')->where(array('userid'=>$userid))->select();
        $remote = M('console_log','tfc_','mysql://console_tfc_kim:FiAdXkHEFxByNMcD@47.91.242.68/console_tfc_kim#utf8');
		//最近半个小时时间戳
		$end = time();
		$start = $end - 30*60;
		foreach($mydevice as &$d){
			//判断是否在线
			if($d['device_id'] == 2){
				$is_on = $remote->where(array('sn'=>$d['sn'],'addtime'=>array('between',array($start,$end))))->find();
				if($is_on){
					$d['online'] = 1;
				}else{
					$d['online'] = 0;
				}
			}
		}
		$this->assign('mydevice',$mydevice);
		$is_cert = M('user')->where(array('id'=>$userid))->getField('is_cert');
        $device = M('device')->select();
        $res = array();
		
        foreach($device as $v){ //{id:'1',value:'POS机'}			
            $res[] = array('id'=>$v['id'],'value'=>$v['name']);
        }
        $this->assign('res',json_encode($res));
        $this->assign('is_cert',$is_cert);
        $this->display();
    }
     /**
     * 获取设备信息
     */
    public function ajax_get_device()
    {
		$userid = session('userid');
        $id = I('post.id');
        $device = M('device')->where(array('id'=>$id))->find();
        if(!$device){
            echo ajax_return(0,'请求有误');exit;
        }
        if(!$device['status']){
            echo ajax_return(0,'暂未开放');exit;
        }
		//判断最大数量
        $count = M('user_device')->where(array('userid'=>$userid,'device_id'=>$device['id']))->count();
        if($count>=$device['max']){
            echo ajax_return(0,'已超过该设备绑定添加的最大限制');exit;
        }
        echo ajax_return(1,'yes');exit;
    }
    /**
     * 添加设备页面
     */
    public function adddevice()
    {
        $id = I('param.id');
        $device = M('device')->where(array('id'=>$id))->find();
        $this->assign('device',$device);
        $this->display();
    }
    public function ajax_add_device()
    {
        $userid = session('userid');
        $id = I('post.id');
        $sn = I('post.sn');
        $mima = I('post.mima');
        $device = M('device')->where(array('id'=>$id))->find();
		//检查实名认证
		if(!$this->check_certification()){
			echo ajax_return(0,'请先进行实名认证');exit;
		}
        if(!$device){
            echo ajax_return(0,'请求有误');exit;
        }
        if(!$device['status']){
            echo ajax_return(0,'暂未开放,不能绑定');exit;
        }
		if(strlen($sn) != 15 && strlen($sn) != 10){ //16位的sn和10位的sn
			echo ajax_return(0,'SN码格式不正确');exit;
		}
		$map['device_id'] = $id;
		if(strlen($sn) == 15){
			$map['sn'] = array('like',$sn.'%');
		}elseif(strlen($sn) == 10){
			$map['sn'] = $sn;
		}
		if($mima){
			$map['mima'] = $mima;
		}
        $device_sn = M('device_sn')->where($map)->find();
		//var_dump($id);var_dump($sn);var_dump($mima);var_dump($device_sn);
        if(!$device_sn){
            echo ajax_return(0,'SN码或密码不正确');exit;
        }
        if(!$device_sn['status']){
            echo ajax_return(0,'此sn码已绑定');exit;
        }
        //判断最大数量
        $count = M('user_device')->where(array('userid'=>$userid,'device_id'=>$device['id']))->count();
        if($count>=$device['max']){
            echo ajax_return(0,'您已超过该设备绑定添加的最大限制');exit;
        }
        //可以绑定
        $jihuo = 0;
        if($device['charge']>0){
            $jihuo = 0; //未激活
			$field = 'lthd';
        }else{
            $jihuo =1; //激活
			$field = 'lth';
        }
        $mo = M();
        $mo->startTrans();
        $rs = array();
        $rs[] = $mo->table('user_device')->add(array('userid'=>$userid,'device_id'=>$device['id'],'sn'=>$sn,'mima'=>$mima,'createdate'=>time(),'status'=>$jihuo));
        
		//给自己返原力币
		if($device['yuanlibi']>0){
			//给自己返算力 一般需要激活才返
			$rs[] = $mo->table('myinvite')->add(array('userid'=>$userid,'device_id'=>$rs[0],'type'=>1,'num'=>$device['yuanlibi'],'status'=>$jihuo,'createdate'=>time(),'channel'=>5));
			$rs[] = $mo->table('user_coin')->where(array('userid'=>$userid))->setInc($field,$device['yuanlibi']);
		}
		
		//激活直接返算力
        if($jihuo){
            if($device['suanli']>0){
                //给自己返算力 一般需要激活才返
                $rs[] = $mo->table('myinvite')->add(array('userid'=>$userid,'device_id'=>$rs[0],'type'=>2,'num'=>$device['suanli'],'status'=>$jihuo,'createdate'=>time(),'channel'=>5));
                $rs[] = $mo->table('user_coin')->where(array('userid'=>$userid))->setInc('lthz',$device['suanli']);
            }
        }
		//激活给注册冻结解冻
		if($jihuo){
			$invites = M('myinvite')->where(array('from_id'=>$userid,'status'=>0))->select(); //注册的记录
			foreach($invites as $invite){
				$rs[] = $mo->table('myinvite')->where(array('id'=>$invite['id']))->setField('status',1);
				$rs[] = $mo->table('user_coin')->where(array('userid'=>$invite['userid']))->setDec('lthd',$invite['num']);
				$rs[] = $mo->table('user_coin')->where(array('userid'=>$invite['userid']))->setInc('lth',$invite['num']);
			}
		}
		
		
		//设置sn码不可用
        $rs[] = M('device_sn')->where(array('id'=>$device_sn['id']))->setField('status',0);
        if(check_arr($rs)){
            $mo->commit();
            echo ajax_return(1,'新增设备成功');
        }else{
            $mo->rollback();
			//var_dump($rs);
            echo ajax_return(0,'新增设备失败');
        }

    }
    /**
     * 邀请好友
     */
    public function invite()
    {
        $phone = session('phone');
		$info = M('user')->find(session('userid'));
        $this->assign('phone',$phone);
        $this->assign('info',$info);
        $this->display();
    }


    /**
     * 邀请好友
     */
    public function invite2()
    {
        session('phone',1546489464);
        $phone = session('phone');
        $this->assign('phone',$phone);
        $this->display();
    }


    /**
     * 实名认证
     */
    public function certification()
    {
        $userid = session('userid');
        $info = M('user_certification')->where(array('userid'=>$userid))->find();

        if($info && $info['status'] == 1){
            $is_cert = true;
            $notice = '恭喜您已通过实名认证';
        }elseif($info && $info['status'] == 2){
            $is_cert = true;
            $notice = '您已提交实名认证未通过审核，请重新提交';
        }elseif($info && $info['status'] == 0){
			$is_cert = true;
            $notice = '您已提交实名认证，请耐心等待后台审核';
		}
		
        $this->assign('is_cert',$is_cert);
        $this->assign('info',$info);
        $this->assign('notice',$notice);
        $this->display();
    }
    public function ajax_certification()
    {
        $userid = session('userid');
        //先判断是否已经提交或审核通过
        $info = M('user_certification')->where(array('userid'=>$userid))->order('id desc')->find();
        if($info && $info['status'] == 1){
            echo ajax_return(0,'您已通过实名认证，无需再次提交');exit;
        }elseif($info && $info['status'] == 0){
            echo ajax_return(0,'您已提交实名认证，请耐心等待后台审核');exit;
        }
        $realname = I('post.realname');
        $idcard = I('post.idcard');
        $zhengmian = upload_file(UP_USER,$_FILES['file1']);
        $fanmian = upload_file(UP_USER,$_FILES['file2']);
        $shouchi = upload_file(UP_USER,$_FILES['file3']);
		//验证身份证号唯一
		$d = M('user_certification')->where(array('idcard'=>$idcard))->find();
		if($d){
			echo ajax_return(0,'此身份证号已提交实名认证，不能重复提交');exit;
		}
        $id = M('user_certification')->add(array('userid'=>$userid,'zheng'=>$zhengmian,'fan'=>$fanmian,'shou'=>$shouchi,
                'realname'=>$realname,'idcard'=>$idcard,'createdate'=>time()
            ));
        if($id){
            echo ajax_return(1,'提交成功，请耐心等待后台审核');
        }else{
            echo ajax_return(0,'提交失败');
        }
    }
	public function ajax_re_cert()
	{
		$userid = session('userid');
        $info = M('user_certification')->where(array('userid'=>$userid,'status'=>2))->order('id desc')->find();
		if(!$info){
			echo ajax_return(0,'请求有误');exit;
		}
		$res = M('user_certification')->delete($info['id']);
		if($res){
			echo ajax_return(1,'');exit;
		}else{
			echo ajax_return(0,'操作失败');exit;
		}
	}

    /**
     * 邀请记录
     */
    public function myinvite()
    {
        $userid = session('userid');
        $p = I('param.p',1);
        $list = 5;
        $res = M('myinvite')->where(array('userid'=>$userid,'type'=>2))->order('id desc')->page($p.','.$list)->select();
        $this->assign('res',$res);
        $this->display();
    }
    /**
     * 转出记录
     */
    public function ajax_myinvite()
    {
        $userid = session('userid');
        $p = I('param.p',1);
        $list = 5;
        $res = M('myinvite')->where(array('userid'=>$userid,'type'=>2))->order('id desc')->page($p.','.$list)->select();
        foreach($res as &$v){
            $v['date'] = date('m月d日');
            $v['time'] = date('H:i');
        }
        echo json_encode($res);
    }
	
	 /**
     * 邀请记录
     */
    public function coin()
    {
        $userid = session('userid');
        $p = I('param.p',1);
        $list = 5;
        $res = M('myinvite')->where(array('userid'=>$userid,'type'=>1))->order('id desc')->page($p.','.$list)->select();
        $this->assign('res',$res);
        $this->display();
    }
    /**
     * 转出记录
     */
    public function ajax_coin()
    {
        $userid = session('userid');
        $p = I('param.p',1);
        $list = 5;
        $res = M('myinvite')->where(array('userid'=>$userid,'type'=>1))->order('id desc')->page($p.','.$list)->select();
        foreach($res as &$v){
            $v['date'] = date('m月d日');
            $v['time'] = date('H:i');
        }
        echo json_encode($res);
    }
	//邀请好友记录
	public function friends()
    {
        $userid = session('userid');
        $p = I('param.p',1);
        $list = 5;
        $res = M('user')->where(array('pid'=>$userid))->order('id desc')->page($p.','.$list)->select();
        $this->assign('res',$res);
        $this->display();
    }
    /**
     * 转出记录
     */
    public function ajax_friends()
    {
        $userid = session('userid');
        $p = I('param.p',1);
        $list = 5;
        $res = M('user')->where(array('pid'=>$userid))->order('id desc')->page($p.','.$list)->select();
        foreach($res as &$v){
            $v['date'] = date('m月d日');
            $v['time'] = date('H:i');
        }
        echo json_encode($res);
    }






	/*
	*添加申请pos机或路由器
	*/
	public function getpos(){
		$this->display();
	}
	public function getrouter(){
		$this->display();
	}
	public function addaddress(){
		$type = I('param.type');
		if($type !=1 && $type !=2){
			redirect(U('user/getpos'));exit;
		}
		$shenqing = M('user_shenqing')->where(array('userid'=>session('userid'),'status'=>2,'type'=>$type))->find();
		if($shenqing){
			$this->assign('y','y');
		}
		$this->display();
	}
	
	/*订单查询*/
	public function order()
	{
		$userid =session('userid');
		$res = M('user_shenqing')->alias('a')->join('left join device b on a.type=b.id')->where(array('userid'=>$userid))->order('a.id desc')->field('a.*,b.name')->select();
		$this->assign('res',$res);
		$this->display();
	}

	/**
     * 退出登录
     */
	public function ajax_logout()
    {	
		$userid = session('userid');
		M('sys_cookie')->where(array('userid'=>$userid))->delete();
        session(null);
        echo ajax_return(1,'退出成功');
    }

    
}